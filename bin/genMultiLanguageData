#!/usr/bin/perl -w

=head1 NAME

generateMultiLanguageData - tool for generating static schedule information

=head1 SYNOPSIS

 generateMultiLanguageData [options] directoryPath

=head1 OPTIONS

  -h         show this help
  -v         verbose output

=head1 DESCRIPTION

C<generateMultiLanguageData> is a command-line tool for generating schedule data in L<XMLTV> format.
The output files are written to directoryPath or $HOME/stock

=head1 AUTHOR

This software is copyright (c) 2021 by Bojan Ramšak

=head1 LICENSE

This file is subject to the terms and conditions defined in
file 'LICENSE', which is part of this source code package.

=cut

use 5.010;
use warnings;
use strict;
use utf8;
use Pod::Usage;
use Getopt::Std;
use Encode qw(decode);
use Path::Class;
use Time::Piece;
use Try::Tiny;
use Spreadsheet::Write;
use open qw ( :std :encoding(UTF-8));

our $VERSION = '1.03';

my %args;
my $verbose = 0;

getopts( "hv", \%args ) or $args{h} = 1;

say("generateMultiLanguageData - ver. $VERSION Copyright 2021 Bojan Ramsak");

pod2usage(
    -verbose  => 99,
    -exitval  => 0,
    -sections => "SYNOPSIS|OPTIONS|DESCRIPTION"
    )
    if exists $args{h};

$verbose = 1 if exists $args{v};

# define and check output directory
my $path;
if ( $#ARGV > -1 ) {
    $path = shift @ARGV;
} else {
    $path = dir( $ENV{'HOME'}, 'stock' );
}
die "Directory [$path] does not exist!" if !-d $path;

# global variables
my $maxDays      = 7;
my $sampleEvents = readSampleData();

# Generate the TVXML schedule
my @sidList = qw(701 702 703);

foreach my $sid (@sidList) {
    say("Generating [$sid] service data") if $verbose;
    my $schedule = buildSchedule( $sid, $maxDays );
    my $output   = '<?xml version="1.0" encoding="utf-8"?>' . "\n";
    $output .= '<!DOCTYPE tv SYSTEM "http://127.0.0.1/xmltv.dtd">' . "\n";
    my $xmlParser = MyXMLSimple->new( RootName => 'xml', KeepRoot => 1 );
    $output .= $xmlParser->XMLout($schedule);

    my $filePath = file( $path, sprintf( "schedule%02i.xml", $sid ) );
    say($filePath);
    open( my $file, ">", $filePath ) or die "Cannot open file [$filePath] for writing!";
    print $file $output;
    close($output);
} ## end foreach my $sid (@sidList)

=head1 SUBROUTINES/METHODS

=head3 buildSchedule( $serviceId)

Generate schedule data for channel with SID = $serviceId for next $days.

=cut

sub buildSchedule {
    my ( $serviceId, $maxDays ) = @_;

    my $now       = time;
    my $eventSize = $serviceId & 0x1f;

    while ( $eventSize < 600 ) { $eventSize = $eventSize * 10; }
    say("  $serviceId => $eventSize") if $verbose;

    my $start      = ( int( $now / $eventSize ) ) * $eventSize;
    my $eventCount = 0;
    my $schedule   = {
        'tv' => {
            'generator-info-name' => 'cherryEpg - sample data http://demo.cherryhill.eu',
            'channel'             => {
                'id'           => $serviceId,
                'display-name' => { content => "Service $serviceId" }
            },
            'programme' => []
        }
    };

    while ( ( $start + $eventCount * $eventSize ) < ( $now + $maxDays * 24 * 60 * 60 ) ) {
        my $current       = gmtime( $start + $eventCount++ * $eventSize );
        my $currentToHour = $current->epoch % ( 6 * 60 * 60 );
        my $next          = gmtime( $start + $eventCount * $eventSize );
        my $nextToHour    = $next->epoch % ( 6 * 60 * 60 );

        my $sampleDataIndex = ( $current->epoch / $eventSize ) % $#{$sampleEvents} + 1;

        if ( $currentToHour < $eventSize ) {
            $current -= $currentToHour;
            $sampleDataIndex = 0;
        }
        if ( $nextToHour < $eventSize ) {
            $next -= $nextToHour;
        }
        say( "    ", $current->strftime("%Y%m%d%H%M%S %z") ) if $verbose;

        my $sample = ${$sampleEvents}[$sampleDataIndex];
        my $e      = {
            'title' => [ {
                    'lang'    => 'en',
                    'content' => ${$sample}[0],
                },
                {
                    'lang'    => 'es',
                    'content' => ${$sample}[2],
                },
                {
                    'lang'    => 'fr',
                    'content' => ${$sample}[4],
                }
            ],
            'channel'   => $serviceId,
            'start'     => $current->strftime("%Y%m%d%H%M%S %z"),
            'stop'      => $next->strftime("%Y%m%d%H%M%S %z"),
            'sub-title' => [ {
                    'lang'    => 'en',
                    'content' => ${$sample}[1],
                },
                {
                    'lang'    => 'es',
                    'content' => ${$sample}[3],
                },
                {
                    'lang'    => 'fr',
                    'content' => ${$sample}[5],
                }
            ],
        };
        push( @{ $schedule->{tv}{programme} }, $e );
    } ## end while ( ( $start + $eventCount...))

    return $schedule;
} ## end sub buildSchedule

=head1 SUBROUTINES/METHODS

=head3 readSampleData()

Read sample events data from end of file.
Return reference to list containing event data.
First element is 'News'.

=cut

sub readSampleData {
    my @data;

    while (<DATA>) {
        chomp;
        my @splitted = split( /;/, $_ );
        push( @data, \@splitted );
    }

    return \@data;
} ## end sub readSampleData

package MyXMLSimple;
use base 'XML::Simple';

# Overriding the method here
sub sorted_keys {
    my ( $self, $name, $hashref ) = @_;
    if ( $name eq 'programme' ) {
        my @ordered      = ( 'title', 'sub-title' );
        my %ordered_hash = map { $_ => 1 } @ordered;

        #set ordered tags in front of others
        return @ordered, grep { not $ordered_hash{$_} } $self->SUPER::sorted_keys( $name, $hashref );
    } ## end if ( $name eq 'programme')
    return $self->SUPER::sorted_keys( $name, $hashref );    # for the rest, I don't care!

} ## end sub sorted_keys

1;
__END__
English;_;Español;_;Français;_
News;The news today!;Noticias;¡Las noticias de hoy!;Nouvelles;Les nouvelles aujourd'hui!
The Mentalist;American drama television series;El mentalista;Una serie de televisión estadounidense de CBS;Mentalist;Une série télévisée américaine CBS
Tom and Jerry;comic fights between an iconic pair of adversaries;Tom y Jerry;peleas cómicas entre un par icónico de adversarios;Tom et Jerry;combats comiques entre une paire d'adversaires emblématiques
